/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 27.05.2024 19:26:49

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 8
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 41632;
#else
constexpr int kTensorArenaSize = 40608;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,3960 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0025582108646631241, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 99, 40, 1, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data2[2] = { -1, 4000, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data3[3] = { -390, 2505, -1494, };
const TfArray<1, int> tensor_dimension3 = { 1, { 3 } };
const TfArray<1, float> quant3_scale = { 1, { 6.5500239543325733e-06, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[3*4000] = { 

  23, 25, 4, -10, -17, 17, 21, -15, 14, 0, 0, 15, 13, 24, 6, 21, 29, 28, 0, 18, 28, 13, 16, 7, 22, 10, 29, 24, 5, 2, 34, -8, 17, 35, 2, -4, 41, -6, 3, 20, 16, 4, -16, -14, 5, -14, 2, 32, 19, 22, 6, 2, -4, 14, -18, 6, -4, 10, -11, 9, 22, 20, 5, 12, 18, 3, -6, 13, 24, 4, 24, 11, -3, 8, -5, 44, 5, 16, -21, -25, -11, 2, -1, -19, 21, 22, -1, 21, 27, 4, -15, -9, 10, 30, -13, 8, 2, -1, 16, 38, -19, -7, -17, -7, -2, -16, -18, 31, -15, -1, 1, 25, -14, -2, 20, 20, 24, 18, 19, 18, -3, 18, -16, -27, 12, 7, -1, -16, -9, 9, 0, 12, -3, 10, -8, -19, -13, -19, -16, -2, 16, -14, 26, 7, -11, 19, 29, 21, -12, 5, -5, -5, 0, 0, 0, 14, -21, 13, -3, 34, 8, 19, -1, 17, 20, 4, 36, -4, -13, 17, -15, 21, 14, -15, 31, 7, 24, 6, 19, 29, 1, 40, 44, 13, 16, 24, 20, -41, -5, 22, 9, 42, -1, 11, 2, 7, 42, 7, 3, 30, 4, 2, 23, 8, 13, 19, 11, 9, 38, -12, -5, 0, -8, -3, -20, 1, 6, 30, 16, 42, 9, 1, 9, 33, -26, 11, -6, 18, 8, -2, 18, -11, 25, 12, 16, 16, 33, -19, 22, -15, -6, 19, 30, 22, 5, 7, 29, 16, -16, -13, 28, -8, 42, -6, -11, -11, 34, -8, -27, -1, -23, -24, -4, 22, 9, -3, -11, 31, -27, -21, 25, 12, 14, 29, 2, 5, 21, -27, -11, -24, 20, 31, 1, 16, 4, 5, -3, -21, 19, -15, 19, -12, -14, -7, -14, 8, 9, -15, 8, -25, 9, -18, -1, 24, 8, 27, -11, -13, 20, -9, -5, -21, 5, 17, 0, 22, -5, -16, -24, 36, 13, 33, -6, 44, 14, 18, 27, 7, 19, 24, -8, 1, -9, -11, 13, 13, 13, -7, 40, -11, -1, 7, 13, 33, 8, 10, 20, -5, -15, -6, 21, 10, -6, 33, 31, 18, 35, 39, 2, 9, -8, 13, -10, -6, 32, 9, 5, 46, 7, -3, 22, 19, -23, -6, -17, -2, 12, -1, -14, 12, -20, 17, 26, 12, -4, 7, -22, -10, -1, -12, -8, -28, -1, 1, -2, -8, 9, -10, 16, -23, -29, -10, 29, -22, 18, -22, 30, 2, 18, 34, -6, -30, 17, 2, -9, 6, -4, -29, -26, 7, -24, -36, 1, 24, 6, 14, 6, 13, -6, -3, 17, -23, 7, -4, -5, -11, 6, -14, -22, 31, -1, -9, -24, 2, 2, -22, -13, -14, -2, 12, -1, 7, -6, -4, -22, -3, -18, -1, 8, -46, 13, -5, 13, -13, 24, 7, 15, 26, 27, 24, -3, 10, 33, 21, -16, -6, -4, 38, 11, 21, 10, -10, 14, -14, -6, -5, -4, 6, -2, 9, -8, 18, 5, -5, 16, 20, 1, 9, 6, -4, 24, 6, 28, -2, 22, -9, 22, 18, 12, -9, 36, 16, 5, 34, -10, 6, 17, 30, -12, 36, -11, 21, 10, -14, 3, 10, -18, 3, 7, -10, -1, 13, -13, 1, -3, 25, -2, -4, 28, -29, 27, -3, 37, 21, -24, 0, -27, -16, 16, -12, 11, 16, -2, 22, -6, 13, -22, -2, -33, 11, 19, 17, 29, -23, -10, 20, 20, 22, -2, 15, -18, -32, 5, -20, -36, -6, 16, -18, -6, -12, -12, -13, -25, -7, 0, -28, -36, -6, -20, 6, 29, -7, 3, 3, -24, -9, -39, 9, -6, -13, 16, 13, 12, 25, -28, 1, -4, 2, 32, 7, 27, -5, 8, -9, 30, -14, 3, -10, -25, -7, -28, -13, -13, -2, -6, 31, 11, 7, 29, 6, 6, 26, -9, -5, -3, -15, -20, 14, 3, 21, 29, -13, 27, -15, -10, -4, 14, -15, 32, 16, -13, -3, 11, -13, 10, -4, 18, -5, 32, 17, 19, 25, 22, 5, -1, 30, -1, 10, 26, 0, 29, 34, 5, 29, 16, -1, 33, 4, -7, 27, 14, 7, 5, -14, 31, -3, 2, 9, 44, -8, 12, -17, -23, -4, 7, -6, -16, -12, -15, 13, -5, -19, 21, -5, -6, -16, -10, 8, 9, -13, -16, -11, 2, 14, -28, -9, -22, -22, 9, -21, -17, -20, -31, -17, 2, 10, 4, 5, -1, -16, -25, -6, 14, -44, 0, -5, 48, -19, -37, -35, 3, -14, 3, 13, -29, -21, -23, -1, -44, -34, 21, -22, 25, 2, -7, -19, 5, -22, -25, -20, 13, 0, -2, -3, -18, -31, 4, 24, 16, -7, 7, -25, -4, 28, -1, 3, -21, -18, 1, -22, 29, -10, 6, 15, 24, 10, -13, 11, 28, 26, -6, 11, 25, 12, -16, 21, 5, 9, -9, -13, 5, 25, -6, -5, -3, -5, 12, -7, 12, -27, 9, 10, -23, -25, 1, 2, 51, 19, 30, -32, -19, -14, 6, 2, 27, 17, 1, -29, 1, -10, 16, 20, 16, -9, -4, 1, 4, 10, -12, -6, 16, 16, 30, 27, 12, 13, 33, 20, 8, 22, 5, 1, -32, -15, -26, -20, 10, 14, -25, 44, 21, 5, 10, 8, 13, 6, -12, -12, -27, -33, -16, 11, -7, -42, -32, 18, -6, 2, -15, -40, 28, -5, -13, -37, -10, -29, -29, 2, 3, -9, -45, -29, -37, -50, -16, 2, 1, -36, -12, -7, 6, -51, -16, -32, 4, -30, -8, 53, -14, 9, 6, -31, -6, -24, -23, -31, -1, 1, 12, -4, -29, -22, -13, 2, -6, -14, 9, 10, -6, 5, -16, 6, 15, 4, 9, 13, -1, -3, 6, -7, -7, 2, 8, -20, 5, 7, -18, 14, 8, 4, -3, -5, 27, 16, -17, 0, -17, -20, 16, 28, 27, 32, 8, 23, -16, 31, 14, 11, -15, 15, -2, -4, 16, 7, -3, -4, 43, 4, 37, 14, 14, 20, 24, -4, -10, -14, -16, 1, 25, 8, 25, -16, 29, -1, 34, -5, 26, 13, 25, 0, 26, 2, -18, 4, 3, 16, 7, 22, 41, -24, -11, -19, -43, 0, -27, -15, 9, 23, -14, -6, -14, -7, 37, -11, 30, -39, -1, 2, 9, -26, -25, -39, -31, -20, -9, 21, -11, -6, -22, -32, 18, -66, 5, -22, -30, -26, -7, -40, 8, -49, -46, -38, 3, -72, -16, -12, 35, -57, -4, -17, -12, -23, -22, -9, -18, -23, -19, 29, -62, -40, -20, -42, -1, -23, -31, 1, -29, -17, 0, -9, -33, -46, -40, 4, -27, -33, -28, -44, -15, -11, -14, -17, -15, 34, 34, -9, 26, 0, 9, -39, -1, 13, 6, 3, 3, -21, 10, 22, 2, 13, -9, -8, -1, -6, 12, 9, -1, 11, 28, -8, 5, 0, -1, -14, -12, -1, 24, 18, -17, 26, -13, 9, 22, 10, 23, 24, 2, 21, 14, -8, -2, 23, 37, 20, -10, 6, -15, -21, 5, 27, 5, -13, 5, 3, -17, 4, 25, -9, 6, -6, 28, -10, 25, 32, 5, 25, 7, 35, 54, -10, 30, 18, -26, -5, -7, 0, -7, 28, 20, 45, 35, 1, 25, 21, 43, -46, -2, -26, -4, -23, -34, -19, 12, -51, -4, 50, -46, -17, -28, -19, 22, -47, 5, -40, -52, -44, -26, -22, -22, -20, -31, -34, -49, -79, -16, 7, 50, -45, -25, -16, -65, -25, -24, -11, -39, -12, -35, -15, -66, -57, -32, -47, 2, -13, -45, 13, -30, -41, 10, -15, -41, -29, -46, -30, -20, -18, -5, -26, 19, 18, 7, -26, -7, -21, -18, -2, 10, -28, -17, -31, 18, -8, 20, 27, 2, -16, -3, -5, 11, 23, 2, 34, 0, 3, 5, 14, -18, 6, 31, -16, 34, 8, -15, -3, -13, 4, 15, -6, 16, -16, -14, -9, -20, 16, 32, -15, 1, -14, 26, -33, -14, 6, 29, 11, 2, -24, -13, -25, -24, -4, 40, -16, 5, 6, 14, -10, 2, -7, 3, 20, -1, -17, -8, 31, 0, 8, 32, -17, 7, -16, 7, -8, -7, 25, -28, -9, -2, 4, 13, 42, 4, -48, 3, -24, 17, -32, -22, 3, -25, -23, -1, -26, -26, -30, -4, 15, -40, -12, -4, -44, 22, -61, -19, -47, -43, -53, -3, -44, -29, -53, -22, -41, -71, -89, -13, -39, 47, -59, -42, -50, -62, -34, -73, -57, -51, -45, -57, 27, -82, -55, -19, -57, 5, -76, -15, 6, -10, -22, -24, -9, -23, -35, -20, -24, -8, -33, -14, -8, -29, 12, 17, 14, 2, 3, -14, -2, -9, 1, 8, -13, 31, 21, 28, -10, 4, 8, 32, -10, 7, 24, 4, 30, -2, -12, 10, 2, -8, 9, 3, 19, 27, -10, 4, 18, -30, -11, 23, 24, -11, -11, -8, 31, -10, -23, 26, 11, 41, 25, -5, -26, 14, -16, -1, -3, 1, -15, 15, -41, -26, 3, 5, -8, 21, 22, 21, -3, 7, -21, -17, -1, -22, -19, 13, 43, -1, 7, -21, -10, 54, 25, -1, -17, -22, 22, -20, -2, -21, 7, -15, 24, -8, -49, -2, -11, 40, -30, -26, -47, -55, -19, -23, -17, -35, -20, -19, 40, -36, -51, -16, -28, 30, -76, 1, -72, -85, -31, -37, -59, -33, -37, -60, -12, -56, -73, -25, -51, 29, -82, -46, -38, -71, -68, -70, -51, -58, -70, -78, 27, -60, -44, -30, -72, 26, -34, -31, -6, 5, -30, -51, -17, -41, -52, -59, -18, -31, -3, -50, -25, 14, 2, 19, -2, 0, 15, 13, 3, -1, 27, -23, 13, 4, 21, 26, 7, 37, 19, -24, -5, 39, -2, -12, -9, 4, -16, 4, -24, -19, 20, 12, 17, 9, 34, 39, 12, -9, -2, -16, -9, 13, -13, -1, 22, 9, -25, -6, -10, 46, 17, -8, -25, 3, 3, 37, 4, -24, -29, -12, -2, -14, 14, 21, 17, 15, 27, -9, -8, -10, 4, -14, -6, 9, 5, -21, 0, -12, 31, 6, 3, 17, -27, 21, -1, -38, 18, -17, 13, 0, -22, 19, 4, 7, -46, -6, 7, 40, -50, -42, -53, -22, -61, -49, -27, -54, -58, -65, 8, -51, -44, -7, -35, 15, -47, -16, -60, -97, -82, -28, -60, -37, -79, -69, -14, -66, -127, -20, -36, 44, -68, -76, -57, -51, -69, -48, -75, -75, -65, -79, -27, -96, -51, -8, -78, 34, -60, -45, -14, 0, -75, -31, -45, -25, -23, -53, -44, -60, 5, -18, -39, -15, -15, 20, 19, 6, -3, 30, -2, -25, -8, -37, -60, -1, -9, -3, 8, 23, -11, 6, -17, -10, -12, 6, 10, -4, 23, 28, 3, 19, -5, -1, 25, 33, 34, 7, -19, -34, -29, 17, -1, 10, -4, -4, 20, -8, -41, -8, 24, 52, -4, 14, -36, 3, 13, 31, -14, 7, 2, -26, -3, -3, -26, 30, -29, 21, 9, 8, 7, 18, 12, -9, 5, -19, -4, 1, 4, -3, 4, -11, -3, 18, -12, 1, -37, -34, -21, 8, 4, -21, -3, -13, 25, -14, -34, 10, 18, 9, -55, -16, -25, -35, -38, -37, -55, -42, -50, -17, -18, -43, -26, -15, -35, 56, -62, -42, -95, -98, -53, -68, -72, -33, -68, -47, 0, -79, -96, -5, -62, 39, -80, -82, -73, -80, -71, -84, -67, -61, -72, -91, -3, -87, -103, -46, -79, 8, -59, -63, -38, -52, -74, -30, -19, -46, -60, -62, -42, -74, 7, -55, -24, 11, -11, -7, 7, -2, -8, -24, -25, -6, 20, 3, -7, 23, -7, 10, -12, 7, 15, -12, -18, 13, -5, 4, 3, 11, 16, 26, 13, 20, -4, 23, -18, 7, 25, 24, 19, -27, -5, -8, -7, -4, -32, -2, 39, -31, -30, 23, 20, 2, -8, 19, -37, 15, -26, -4, -19, -20, -33, -29, -1, 5, 0, -4, -10, 16, -1, -7, 16, -13, -13, -9, -5, 3, 14, 12, -8, -15, -20, 11, -7, 26, -5, 22, -31, -46, -3, -13, -5, 10, 6, 16, 25, 0, -73, 37, -12, 21, -38, -30, -50, -77, -67, -15, -22, -60, -40, -26, 22, -66, -77, -47, -35, 31, -86, -59, -89, -67, -46, -47, -40, -48, -74, -75, -24, -60, -78, -37, -29, 44, -79, -41, -77, -59, -88, -52, -71, -73, -89, -79, 15, -122, -79, -14, -79, 9, -61, -47, -54, -1, -68, -20, -28, -30, -47, -46, -24, -81, -35, 4, -41, 1, 12, 16, -26, -6, 1, 7, -21, -8, -2, -22, -22, 21, -7, 3, -19, 2, 14, -4, 16, -2, 30, 16, 3, 1, 27, 9, 0, 7, 5, 21, 6, 5, 32, -1, -13, -31, 0, 31, 23, 19, 13, 6, 37, -31, -19, 25, 29, 2, -16, 24, -37, -13, 19, 35, -31, -28, -27, -20, -50, -11, -14, 25, -12, 20, 13, 13, 0, -15, -12, 15, -19, -16, -3, 17, 28, 21, 2, 15, 13, 17, 5, 3, -11, -52, -18, 6, -17, -17, 14, 12, 4, 3, -36, 42, -19, 10, -74, -15, -51, -60, -52, -48, -27, -32, -43, -66, 27, -40, -50, 10, -16, 59, -88, -12, -52, -89, -50, -67, -56, -74, -39, -74, -19, -84, -114, -8, -61, 57, -95, -81, -53, -59, -61, -26, -82, -52, -68, -76, 20, -96, -72, -23, -82, 20, -71, -52, -29, -39, -51, -20, -29, -64, -28, -56, -46, -72, -25, -13, -15, 8, -30, 10, 4, 29, -18, 12, 18, -15, -19, -11, -3, -12, 10, -9, -10, 30, -5, 0, 18, 22, 3, 25, -6, -9, -7, 10, -8, -3, 9, 9, 4, 26, 9, 6, 22, 10, 16, 12, -5, 17, 17, 29, -6, -2, -4, 13, -4, 6, -8, 18, -28, -7, -7, 38, -15, 4, -4, -12, -37, -11, 0, 0, -3, 32, 23, 11, -12, 5, 21, 23, -1, -16, 0, 20, 16, -16, 22, 28, -8, 43, 23, 32, 3, -52, 10, -11, -7, 23, -26, 14, 18, -3, -33, -6, 3, 43, -12, -1, -43, -56, -40, -53, -56, -40, -61, -62, 20, -11, -67, -11, -48, 81, -71, -10, -76, -92, -46, -70, -28, -70, -40, -60, -10, -102, -73, -28, -57, 32, -69, -55, -57, -45, -53, -52, -78, -52, -91, -89, 0, -59, -60, -7, -59, 16, -65, -35, -17, -11, -57, -12, -60, -28, -24, -66, -63, -30, 4, -1, -59, 24, -5, -14, -16, -9, 16, 12, 6, 2, -16, -7, -18, -3, 2, 15, -26, 15, 33, 9, 4, 29, 13, 21, 22, -11, 14, -3, 7, 20, 17, 26, 24, -2, 32, 9, 0, -12, 14, 14, 23, -8, 18, -17, 26, 8, -16, 33, 26, 41, -16, 40, -2, -9, 23, -9, 9, 7, 7, -10, -47, -14, -21, 41, -5, 42, 10, -15, 31, 40, 23, -11, -9, 3, 17, -16, 38, -28, 11, 12, 3, 40, 6, -3, -28, -35, 13, 15, -4, 10, -16, 6, 30, -6, -39, 32, -7, 68, -47, 3, -7, -32, -53, -34, -42, -28, -55, -36, 52, -39, -34, 2, -37, 72, -84, -23, -73, -105, -50, -36, -53, -41, -59, -37, -15, -71, -96, -4, -34, 48, -89, -51, -81, -72, -69, -37, -75, -36, -49, -70, 1, -77, -63, -11, -78, -7, -77, -70, -26, -20, -46, -23, -61, -44, -44, -61, -2, -70, 4, -43, -34, 1, 19, 10, -14, 25, -1, 15, -7, -8, -7, -6, -57, -5, 10, -9, 7, 12, 19, 11, 7, -5, -14, 16, -13, 22, 18, -17, 6, -8, 6, -2, -3, 33, -6, 4, 23, -3, 2, -5, -19, 15, -9, 12, 9, 17, -3, -7, -7, -6, -17, 36, -52, -25, -5, 23, 9, 12, 3, -20, -1, -22, -40, 24, -14, 17, 26, -5, -13, -23, -7, 16, -23, -12, -17, 5, 30, 14, 12, 13, 11, 19, 17, 19, 4, -10, 23, -20, 9, 20, 7, 14, 27, 3, -15, 22, 8, 20, -23, -11, -59, -53, -34, -42, -62, -19, -30, -47, 40, -30, -21, -1, -43, 65, -61, -47, -76, -71, -39, -36, -56, -23, -60, -54, 25, -70, -119, 19, -36, 28, -85, -52, -45, -41, -72, -52, -40, -35, -72, -83, -7, -86, -46, 2, -55, 18, -63, -24, -16, -7, -63, -44, -16, -22, -54, -43, -14, -18, 4, 0, -26, 9, -24, -11, -21, -14, 24, 41, -7, -3, -19, -10, -30, 6, -10, 26, -14, 24, 21, 27, 30, 2, 8, 0, -12, -20, -1, -9, -16, -13, 23, 1, 4, 24, 17, 32, 22, -9, -19, 6, -2, -1, 30, 0, 35, 6, 4, 20, 8, -2, 25, 6, -12, 20, 10, 14, 20, -15, -37, -11, -7, 8, -13, 39, 4, 54, -11, -4, -1, 18, 8, -14, 6, -1, -17, -10, 34, -26, 2, 14, -8, 53, 27, 17, 4, -15, 12, -11, -8, -14, -13, -13, 39, -37, -8, 0, -14, 65, -66, -22, -2, -24, -30, -20, -20, -19, -73, -37, 31, -40, -57, -25, -7, 32, -66, -12, -51, -71, -50, -50, -30, -36, -76, -58, -21, -95, -116, -4, -54, 57, -43, -58, -51, -38, -64, -29, -44, -33, -37, -36, 14, -93, -52, 16, -69, 11, -59, -61, -25, -8, -10, -52, -42, -19, -31, -27, -6, -17, -28, -30, -52, -15, -17, 10, 17, 17, -21, -9, 2, -14, 29, 25, -5, -2, 4, 16, -6, -10, -24, -5, 3, -12, 13, 9, -4, -4, -7, -4, 25, 7, 2, -9, 28, -1, 3, 17, -13, -24, 0, -6, 4, 8, 10, -2, 6, 16, 19, 38, 3, 18, 19, 15, 8, 2, -16, 0, 13, 19, -16, -15, -10, 5, 7, -4, 3, 24, 4, 2, 27, 19, 18, -11, -5, 31, 3, 1, -2, 12, 15, 23, -7, 28, 0, 9, 7, -20, 5, 8, -10, -7, -25, -23, 42, 24, -12, -3, -9, 14, -63, -7, -12, -23, -61, -52, -26, -15, -46, -43, 37, -58, -44, 8, -34, 67, -56, -53, -47, -98, -44, -33, -55, -55, -62, -70, -18, -34, -97, -11, -22, 48, -47, -53, -52, -66, -59, -33, -46, -67, -57, -46, 14, -56, -60, -16, -81, 50, -52, -60, -20, 1, -33, -28, -4, -40, -21, -12, -30, -45, -16, 4, -15, 31, 18, 38, -3, -3, 11, 1, -23, -23, -21, -7, -30, -38, 0, -19, -26, 28, 4, -1, 20, 10, 13, 4, -2, -8, 4, 25, 0, -16, 29, -2, -4, 22, 11, -15, -9, 22, 32, 15, -2, 21, -13, -11, 14, 5, 24, 3, -10, 22, 7, 6, 18, -6, 4, 40, 26, 32, -24, 33, -21, 2, 12, 11, 4, -7, -6, 18, -5, -5, -2, 30, -21, -20, -21, 7, 30, -1, 7, 0, 8, 6, -29, -11, 17, -15, -3, -4, 4, 20, 10, 29, 7, -11, 1, -5, -8, 19, -57, -36, -5, -5, -21, -49, 4, -11, -15, -7, 31, -54, -9, 15, -25, 33, -16, -25, -56, -68, -6, -11, -23, -29, -60, -40, 8, -44, -79, 22, -46, 22, -38, -48, -40, -50, -54, -51, -8, -40, -35, -69, 44, -63, -14, 4, -30, 0, -20, -17, -34, -29, -28, -45, 0, 0, -17, -32, -19, -9, 1, 11, -29, -15, -1, -14, -8, -9, 27, 34, 4, -24, -17, -6, 21, 25, -19, 14, -19, -1, -6, -18, 23, 34, 28, 19, 25, 29, -4, 29, 20, 8, -3, 19, 24, 11, 28, -3, 12, 1, 23, 12, 26, 28, 7, 7, 23, -13, 24, -5, 9, 1, 7, 13, 3, -5, 8, 26, -3, 39, 29, 4, 23, -1, 17, 45, 29, -7, 20, 20, 15, 8, 6, -11, -1, 5, 4, -10, 21, 0, 3, 19, 21, 13, -17, -6, 12, -4, -13, -7, 24, -12, -8, 20, 1, 8, -44, 31, -15, 34, -40, -8, -3, -26, -30, -39, 15, 3, -26, -7, 0, -23, -32, -29, -20, 32, -38, -34, -25, -54, -38, -28, -22, -14, -22, -10, -12, -45, -38, -23, -25, 54, -18, -37, -17, -18, -55, -58, 3, -22, -51, -40, 36, -50, -50, 44, -56, -1, -41, 5, 5, 11, -22, -32, 2, -6, 9, -14, -6, -11, -26, 32, 6, -5, -21, 9, 27, -6, 32, 6, 26, 28, 18, 25, -24, -14, -15, 20, 17, 25, 22, -10, 0, 22, 34, 8, 29, -9, 6, 19, 7, 27, -17, 30, -22, -2, -16, 27, 10, -17, -1, -5, 5, 22, 20, 14, 19, -16, 10, 8, -17, -4, 5, 19, -7, 36, 18, 7, -2, 14, -17, 15, 6, -4, -11, 0, 21, 7, 30, 49, -5, 1, -3, -2, 13, -13, -5, 9, -25, 26, 34, 29, 24, 5, -3, 18, -24, -25, 12, -16, -2, -1, 14, -1, 7, 10, 0, -3, -9, 12, 7, 5, -22, 11, -31, -27, -16, 12, -6, -37, 4, -35, -8, -7, -32, 13, -19, -17, -30, -42, -28, -1, -32, -15, -14, -35, -51, 0, -54, 17, 12, 10, -33, -11, -38, -14, -7, -18, 13, 13, -41, -12, 19, -65, -22, 14, 8, 10, 11, -14, 0, -9, -24, 6, -18, -6, 2, -6, 18, -25, 14, 34, -9, 38, -11, 0, 3, -6, 1, -3, 2, 32, 25, 1, 13, 19, 32, 20, 31, 13, 6, 9, 11, -7, 3, -1, -8, 8, -2, -1, -6, -6, -11, 23, -5, -5, 21, -12, -23, 7, 15, 8, 27, 10, 13, 14, -15, 25, 2, 7, 20, 15, 24, 19, 6, 16, 33, 24, -1, 23, -14, 25, 8, 7, 8, 9, 26, -8, -15, -4, 14, 32, 9, 13, -14, -13, 9, -5, 22, 1, 7, 27, 5, 0, 2, 24, -21, -24, 19, 20, -7, -9, -9, 12, 10, 19, -25, 44, 33, 15, -44, -6, 0, -26, -2, -2, -18, 10, -24, 17, 25, -13, 3, -5, 2, -14, -16, -20, -33, -1, 22, -26, 8, 20, -13, 12, 4, 16, -43, 11, 9, 9, -29, -22, 10, -6, -7, 3, -12, -17, -17, 14, 20, -13, -30, 7, -29, 14, -6, -27, 26, 3, 15, 21, 1, 8, -15, -21, 3, -22, 25, 17, 4, -5, -20, 19, -10, 16, 11, 11, -23, -16, 25, 8, 8, -3, 4, -4, 17, 15, 17, 1, 16, 35, 18, 28, 16, 10, 9, 0, 2, 18, -10, 3, -9, 13, 31, 6, 10, 12, 34, 28, 27, -13, 13, 11, 16, -4, 13, 4, 22, 28, 16, 20, 4, 3, 17, 32, 37, -17, -7, 19, -13, -2, 32, 31, -18, 31, -18, 31, 27, 13, -4, 21, 13, 11, 1, 44, 29, 7, 14, -11, 11, 3, 19, 16, 18, 6, 12, 22, 10, 16, 34, -2, 7, 4, -18, -3, -9, -4, -22, -28, 4, -32, -8, -16, -5, -17, -27, -25, 22, -19, 17, 5, 11, 14, -12, 1, -29, 11, 6, -14, -10, -5, 22, -8, -67, 0, 16, 25, -7, 0, -1, 10, 1, -4, 3, -22, 0, 2, 5, 12, 19, -42, -23, 32, 0, 13, 2, -8, -14, 7, -16, 16, 8, -4, 8, 8, -21, -7, 12, -5, 19, 14, 14, 18, -6, 9, 26, -26, 25, 4, 21, 28, -6, 4, 25, 33, 27, 15, 0, -3, 21, 2, -18, 18, 1, 18, 4, 25, -24, 3, 13, -1, -2, -7, 18, -22, 25, -20, -14, 18, 2, -5, 18, 7, -8, 25, 13, 24, 10, -3, 14, 35, 15, 15, 11, 25, 12, 36, 0, 33, -13, 18, 35, 23, -10, 7, 0, 27, 24, 12, 15, 29, 3, 4, -6, 28, -1, 11, -19, 23, -14, 30, 2, 3, 11, -27, -8, -28, 7, 22, 15, -13, 26, 12, -7, -12, 21, 0, -26, -33, 2, 25, 3, 8, 6, -18, -15, 11, 1, 3, 19, 8, -27, -23, 23, 20, 19, 3, -10, 9, 1, -17, -24, 26, -40, 12, 21, -6, 24, 2, 20, 12, 29, -14, 8, -27, 1, 25, 21, 20, 45, 18, 11, 21, -4, -18, 2, 10, 11, 2, 11, -2, -9, -13, 3, 17, 26, 0, 28, -12, -19, 3, 11, -7, -11, 33, 1, -11, 23, 17, -10, 13, -10, 26, 29, 28, -2, -1, -4, 19, -5, -1, 2, -21, -10, -8, -1, 23, 21, 10, 30, -1, -28, 
  -16, -16, 32, -15, -21, -32, -18, -12, 13, 4, 22, -25, -22, 17, -6, 14, -3, -16, -5, 10, 9, 16, 7, -32, -34, 13, -8, 0, 0, -9, 6, -8, -17, -9, 16, 2, -14, -9, 10, 4, -10, -37, -13, 13, 7, -10, -19, -20, 33, -36, 3, -48, -41, -47, -17, -11, -12, -21, 7, 52, -32, -77, -28, -28, 20, 2, 5, -28, -24, -51, -23, -26, -46, -56, -50, 7, -40, -11, -17, -68, -15, -25, 3, -60, -54, -67, -47, -28, -23, -11, -44, -15, -5, -12, -38, -14, 1, -23, -30, -2, 13, 0, -24, -17, 18, -27, -48, 12, -32, -17, -17, -3, -36, -23, 15, -31, -24, 15, 14, 2, 10, -34, -11, -21, -44, -15, -21, -25, 4, -1, -13, -10, 6, -23, 0, -7, -22, -8, -33, 7, 9, -16, -19, -29, -25, -21, 11, 7, 16, -18, 24, -30, -16, 16, 10, -20, -29, -18, -5, -13, 14, 15, -2, 3, 3, -2, 4, -10, 6, -22, 2, -11, -8, -15, -23, 9, 11, -19, 14, -7, -32, -15, 2, 20, -17, -19, -8, 5, 8, -8, 7, 1, 34, -16, 11, -9, 21, 5, 16, 18, -7, 10, -17, -26, 0, -5, -8, -18, 34, -24, 24, -36, -62, -9, 10, -33, -1, -30, -16, 36, -10, -49, 16, -17, 12, -22, 17, -45, -44, -13, 6, -48, -7, -60, -9, 11, -59, -34, -18, -29, 0, -2, -62, -59, -18, -51, -44, -57, -10, -21, -33, 2, -10, -47, -36, -20, 14, -18, -60, -25, 8, -7, -57, -5, -34, -8, -59, 22, -46, -27, -35, -52, 14, -6, 2, -27, -19, 2, -12, -25, -31, -8, 4, -34, -21, -38, -12, 16, -24, 10, -24, -10, -18, -42, -20, 9, -15, -41, -9, -26, -32, 11, -40, 19, -3, -17, -7, -9, -30, 14, 12, 16, 19, -13, -32, -20, -28, -4, 19, -3, 2, 16, -13, -18, -5, -11, -17, 12, 15, 21, -10, -13, 16, -12, -17, 29, 8, 1, -4, 13, 12, 6, -3, 22, -13, -16, 7, -9, 19, 1, 18, 29, -8, 0, 18, -13, 9, 10, 16, -7, -6, -2, 18, -8, 23, 11, -19, -7, 61, 16, 20, -41, -46, 5, -7, 0, -1, -24, -16, 57, -35, -38, 23, 19, -2, -15, -1, -24, -27, -45, -6, -41, -39, -22, -29, 1, -30, -45, 13, -31, -21, -11, -51, -23, -25, -52, -57, -27, -31, -31, -44, -45, -17, -25, -17, 8, 18, -17, -44, -26, -10, -6, -43, -38, -55, -63, -15, -20, -45, -28, -27, -58, 14, 9, 18, -24, 21, -14, -26, -4, -17, 18, -10, -34, 9, -15, -20, -10, -30, -12, 11, 14, -4, -13, -29, -33, -1, -7, -15, -19, -12, 18, 19, 10, 15, -29, 19, -29, 2, -12, 1, -29, 3, 8, 23, 2, -20, -12, 1, 11, 10, 4, 13, 17, 22, -2, 8, 8, -16, -26, -11, -7, 8, 12, 3, 9, -16, -13, -21, 1, -10, 12, -7, 21, -8, 29, 16, -5, 4, 13, -1, 5, -33, 13, 23, -12, 11, 19, -34, -8, -2, 9, 31, -13, 3, 9, 17, 19, 59, -17, -19, -9, -69, -23, 0, -9, -8, -40, -27, 62, -6, -76, 32, -24, 16, -44, -21, -10, -30, -7, -4, -37, -28, -15, -30, -11, -44, -37, -30, -22, -14, -25, 0, -40, -18, -48, -76, -42, -31, -19, -51, -17, 1, -23, -42, -4, 37, -48, -60, -40, 5, -32, -41, -25, -19, -46, -44, 8, -7, 3, -39, 1, -8, -38, 15, -15, -12, -8, -29, -18, -1, -4, 3, -34, -15, -3, -12, 4, -5, -41, -15, 0, -24, -1, -25, 9, -26, 7, 6, 15, -18, 2, -26, 6, -25, -31, -22, 6, -13, -17, 12, -5, -17, 16, 16, -1, -22, -6, -3, -13, -23, -11, 21, 9, 7, 8, -11, 19, -18, 31, 20, -27, 20, 1, -15, 10, 20, 22, 10, 11, 17, 6, -8, 13, 2, 19, -4, -14, -4, -2, -27, 7, -32, -21, 13, 9, 10, -25, 2, -18, -26, 12, 1, 18, -11, -17, 8, 20, 26, -10, 27, -45, -62, -17, 4, -23, -24, -25, -6, 30, -16, -41, 18, -13, 13, -40, 19, -26, -6, -7, 0, -5, -26, -41, -26, 26, -74, -36, 6, -16, 15, -4, -45, -45, -17, -47, -46, -35, -22, -51, -49, 4, 9, -12, -28, -34, 20, -22, -28, -53, -4, -47, -43, -29, -20, -7, -58, 2, -53, 20, -9, -30, -24, 11, 2, 0, 16, -13, -9, 6, 4, 6, 7, 12, -22, -28, 11, 11, 7, -4, 1, -25, -15, 17, 7, -10, 16, -1, 6, -16, -6, -16, -19, 24, -17, -17, -1, -6, -24, -3, 22, -9, 13, 16, -2, -30, -18, -4, -3, 16, -15, 26, -17, 19, -3, -3, -26, -22, -9, 3, 7, -11, -16, -3, -3, 16, -24, 21, -7, 12, 11, 12, 38, 17, 29, 14, 19, -19, 1, 22, -5, 31, -31, 16, 7, 23, 4, -11, -9, -22, 14, -13, 9, 5, 27, -3, 3, 16, 32, -11, 2, -52, -69, -26, -12, -3, -10, -30, 12, 9, -14, -66, -1, -11, 8, -35, -2, 0, -25, -3, 31, 3, -30, 10, -5, 16, -35, -35, -21, -24, -12, 7, -16, -46, -50, -45, -16, -24, -29, -10, -17, 29, 8, -31, -57, -11, 39, 4, -28, -16, -3, -10, -25, -28, -32, 10, -14, 3, -22, 7, -28, -3, 12, 33, 14, 14, -24, -18, -6, -23, -19, 13, 17, -11, 15, 27, -2, 16, -19, -4, -9, 19, -26, -32, 24, -34, 6, -2, -18, -29, -23, 25, 13, -14, -4, -11, -26, -4, -12, -33, 11, -3, 5, -9, -13, -19, -6, -26, 14, -11, -27, 0, 12, -7, -2, -16, -10, 12, 8, 10, 24, 5, 36, 35, -16, 0, 14, 24, 21, 1, -7, 30, -5, 37, 29, 7, -3, -14, 50, 17, 15, 22, -12, -16, -7, 21, 21, 4, -18, 9, -13, -13, 40, 2, 4, -4, 18, 4, 42, 5, -16, -40, -26, 6, -5, -27, -19, -18, 2, 30, -10, -7, 7, 13, -5, 13, -11, -11, -8, 16, 46, -5, -12, 14, -14, 3, -38, -25, 25, -40, -18, -14, -31, -8, 18, -40, 4, -15, -14, 6, 6, -7, 30, -12, -42, -25, 9, 18, -58, -15, 10, 0, -34, -14, -19, -9, -3, -10, 30, 28, -5, -20, 14, -8, 1, 12, -2, -9, 27, -3, -6, 20, 22, 20, -4, -7, -1, 34, -42, 18, 5, -10, 20, -28, -23, 21, 25, 12, 18, -10, -3, -10, -5, 14, -25, 2, 18, -16, -13, -31, 24, 2, 1, 8, -30, 9, -8, -21, -31, -23, -13, -22, -24, -14, -17, 20, -28, 26, 17, -26, -1, 12, 19, 14, -14, 28, 12, 21, 16, 2, 32, -3, 32, 17, -5, 0, 24, -14, 46, 22, -10, 1, -43, 12, 23, 17, -11, -14, 3, -10, -4, 20, 11, -27, 1, -4, -21, 5, 45, -27, -18, -19, -16, -3, -19, 9, -24, -13, -1, 44, 2, 7, 33, -17, 28, 53, 39, 0, 8, 22, 57, 13, 21, 18, -1, 15, -10, 4, 34, -4, -23, 34, -11, -4, 10, 0, 5, 15, 10, 17, -4, -32, 36, 42, -1, -6, 19, -17, -34, -22, 36, 4, -32, 0, -6, -21, -19, 4, 11, 4, -27, -16, 8, -13, -2, -1, 3, 2, -7, 21, 25, 15, 15, 23, 30, -16, -35, 27, 14, -1, -5, -26, 12, 7, 1, -17, -19, -7, -31, 0, 3, -2, -36, -22, -6, 3, 7, -11, 17, 2, -6, -19, -4, -9, -5, -12, -6, 20, -10, 20, 23, -3, -17, -9, -11, -25, -26, -12, -24, 19, -1, 9, -28, -8, -30, 22, 4, -5, 5, 22, 21, -14, 39, 19, 5, 53, 12, -9, 11, -2, -29, 1, -26, -16, -9, 10, -5, -26, -6, -14, -10, 23, -23, -22, 24, -10, 11, -9, 15, -25, 6, 0, 18, 24, -2, -6, 4, 6, -4, 26, -10, 26, 18, -20, -23, 67, 56, 30, 24, 53, 32, 11, 16, 17, 72, 6, 13, 18, 10, -4, 2, 41, 20, 29, 27, 9, -9, 11, 2, 2, 26, -1, 83, -20, -21, 6, 16, 14, -25, -15, -4, -17, -41, -22, -17, 11, 14, -22, 7, -9, -26, 11, 12, 2, 6, 8, 7, -17, 23, -10, -12, -7, 26, 11, -21, -21, 6, -13, -9, 6, -28, 12, 5, 7, -14, -10, 10, -5, -18, -30, -6, -5, -25, -23, -7, -16, -24, 12, 7, 1, 5, 23, 2, 10, 22, -3, -9, 17, -9, -33, -7, 13, 18, -5, 12, -5, -11, 8, -10, -7, -13, 18, 20, 22, 0, 18, -5, 23, 18, 17, 16, 17, 25, 8, 27, 8, 1, -4, 15, 44, -24, -6, -16, 17, -24, -18, 4, 14, 5, 1, 21, -9, 11, -9, -7, -15, -26, 15, -8, 19, -12, 31, 72, 20, 21, 19, -9, 14, 24, 7, -12, 64, 41, 14, -30, 54, 52, 11, 29, 49, 70, 68, 50, 64, 92, 10, 81, 62, 30, 11, -26, 24, -14, 23, 15, -8, 6, 18, 17, 10, 37, -1, 65, 13, -33, 20, 30, -9, -55, -19, 7, -40, -58, -23, -30, -28, -14, 18, -21, -3, -20, 12, -17, -8, -43, 18, -35, -38, -5, -27, -18, 2, -18, -23, -17, -9, -8, -9, 4, -8, -12, -33, -39, -15, -16, -5, -33, -22, -7, -52, -18, -7, 6, -4, 0, -1, -26, 4, 12, -3, 11, 7, 22, -8, -15, 9, -6, -33, -32, -13, -29, -17, 3, -14, 14, 2, -7, -37, 9, 31, -17, -4, 15, -11, -18, 4, -14, 2, -20, -22, -3, 11, -27, -4, -3, 4, -15, -18, -8, 47, -1, -2, -45, 9, 18, 19, 1, 28, 8, 12, 20, 19, 32, 36, 19, -5, 4, 3, 13, -4, -4, 37, 90, 20, 8, 19, -7, 10, 8, 1, 11, 52, 12, -4, -65, 95, 94, 61, 14, 60, 88, 71, 49, 65, 84, 39, 64, 26, 58, 69, -27, 31, 9, 23, 18, 0, 10, -14, 29, 5, 0, 17, 15, 3, -44, -5, 14, -16, -49, -2, 4, -17, -56, -13, -16, -17, -14, 32, -33, -3, -30, -17, -14, 4, 7, -12, -29, -10, -17, 7, -18, 13, -14, -35, -5, -31, -12, -33, -25, -40, -26, -19, -17, -27, 10, 10, -17, -5, -4, -72, 14, 17, -23, -29, -22, -7, -19, -3, -30, -23, -18, -27, -22, 7, -25, 7, 9, -6, -6, -25, -43, -7, -32, 10, 3, 12, 19, 8, -15, 15, 12, -17, 1, 22, -18, 18, -32, 7, -1, 25, 17, 19, 27, 30, 12, -5, 2, -15, 13, 18, -10, 3, -46, 8, 16, 30, 13, 11, 15, -3, 18, 2, 19, 9, 34, -4, -8, -12, -8, -14, 0, 58, 78, 27, 4, 9, 5, 19, 11, -40, 62, 111, -5, 6, -115, 87, 65, 35, 22, 69, 45, 72, 72, 83, 93, 41, 66, 48, 29, 52, -53, 26, -12, 36, 34, 24, -43, 37, 10, 15, 6, 5, 61, 2, -36, 2, 37, -3, -56, 0, 4, -8, -63, -8, -20, -19, -18, 5, 22, 33, -28, 12, 16, 22, 13, 14, 4, 25, -10, -7, 24, 9, 25, -2, 10, -33, 27, -9, -31, -15, -29, 3, 12, 7, 0, -32, -9, -12, -12, -21, 7, 2, -6, -7, 8, -4, -11, -5, -14, -15, -13, -26, 10, -24, -1, -6, -2, -8, 5, -8, -33, -17, -25, 2, 20, 5, -20, -7, 3, 40, 38, 6, 2, 36, -24, -18, -35, 1, 2, -2, -6, 6, -14, 16, 22, -13, 35, -39, 8, 1, 22, -12, -36, 7, -12, 15, -2, 6, 19, -7, 25, -4, 8, -4, 3, -3, 20, -8, -11, 2, 9, 23, 64, 1, 16, 22, 23, 50, 21, -37, 35, 102, 12, 11, -69, 76, 99, 53, 26, 62, 78, 32, 46, 80, 69, 44, 77, 42, 44, 42, -47, 30, -5, 12, 2, 10, -26, 24, 33, 12, 14, -30, 52, 33, -19, 8, 26, -4, -36, 23, 6, -35, -36, -4, -1, 11, 16, 17, 12, 0, -9, 13, -16, 17, 21, 6, 4, -10, 13, 28, 13, -10, 23, -12, 33, -12, -6, 1, 7, 28, 9, -6, -11, 3, 4, -10, -13, 3, 7, -1, -25, -4, -2, -3, -6, 6, -35, -35, -12, -11, -29, -8, 17, -24, -5, -32, -10, -22, 18, 4, 7, 1, -3, -2, 1, 3, -5, 8, 10, 24, 6, 4, 3, 33, -14, -3, -10, 37, 24, 28, -11, -10, -23, 32, 23, 15, 3, -15, 27, 2, -8, 1, -38, 5, -9, 11, -9, 27, -18, -2, 19, 15, -7, 32, 12, 0, 9, -6, -4, 6, 15, 37, 63, -8, 1, 19, -19, 36, 5, -26, 24, 48, 11, 0, -61, 50, 65, 41, 15, 65, 64, 23, 61, 68, 87, -4, 60, 39, 23, 50, -44, 46, -4, 24, 25, 4, -42, 18, 19, -10, -8, 8, 18, -5, -42, 11, 49, -6, -44, 17, -9, -18, -40, 13, 10, -24, -17, 17, -23, 5, -11, 8, -31, 16, 11, -9, -5, -5, 8, 3, 22, 31, -11, -20, 19, 10, 3, -7, -19, 5, -18, 7, 5, 1, -18, 8, 7, 15, -11, 17, -9, -19, -10, 26, -25, 5, -37, -17, -27, -7, -30, 11, -28, -5, -8, -15, 8, -15, 0, -18, -29, -13, 1, -26, 1, -10, 8, 11, -10, -16, -2, -13, 3, 4, 3, -19, -27, 21, -13, 23, 45, -13, 18, 5, 12, 22, -4, -11, -4, -4, -34, -20, 20, -14, -3, 20, 18, 24, -1, 12, -2, 15, -3, 12, 8, -2, -1, 5, -3, 19, 19, 44, 44, -19, -20, 11, 6, -13, 16, -13, 9, 25, 18, 12, -41, 56, 64, 45, 25, 81, 62, 55, 29, 49, 58, 23, 27, 6, 5, 28, -72, 46, 30, -2, 30, 15, -22, 16, 33, 33, 8, -15, 35, 5, -48, 43, 1, -1, -61, -14, 3, 8, -31, -5, -8, -13, 10, 27, 4, 8, -41, -14, -7, 35, 4, -10, 28, 1, 7, 17, 17, 10, 13, -15, -2, 22, 6, 3, -12, 12, -22, 18, 13, 11, 7, -1, -19, -31, -25, 11, -17, 12, -22, 11, 7, -10, -8, 4, -31, -3, 10, -28, -7, 13, 7, 6, -18, 11, 6, 17, -8, -10, -16, 7, -23, -11, -11, -27, -19, -21, 19, 7, 9, -29, -18, 33, -5, 24, 6, 21, 38, -9, -27, 13, 21, -3, -14, 23, 10, 32, -43, 6, -36, 6, -18, 12, 6, -28, 6, -22, -14, 10, -12, 11, -5, -17, -4, -15, 16, -32, -2, -4, -19, -16, 9, -6, 22, -18, -13, -16, -12, 18, 2, 14, -76, 36, 56, 24, 49, 54, 37, 62, 22, 35, 76, 14, 56, 16, 33, 21, -62, 59, -3, 17, 47, 5, -20, 2, 9, 8, 33, -5, 42, 8, -74, 24, 36, -19, -62, 18, -6, 0, -54, 7, 23, -22, -4, 50, -25, -4, -20, 9, 8, 7, 19, 9, -28, 41, 28, 22, 17, -1, 12, -10, -15, 4, 25, 14, 7, -15, -33, 12, 6, -22, -14, -17, 24, -2, -1, 12, 1, -21, 8, -2, -3, -12, -18, -28, 3, -18, -12, 10, -28, -19, -11, -3, -18, -9, -17, 2, -11, 9, -12, -17, -20, -26, 5, 18, 30, -9, 2, -4, 2, 31, -8, -2, 7, -30, -26, -4, 7, -23, -25, 20, -17, -5, -14, -27, 24, -2, 11, 9, -34, -8, 9, 6, -9, 26, -8, -14, 28, 8, 21, -30, -4, -15, -2, 2, 7, 11, 15, 12, -22, 8, 16, 4, -18, -32, 10, 29, -14, -19, 34, 22, -52, 34, 71, 12, 32, 64, 66, 51, 31, 52, 40, -9, 33, 42, -23, 37, -67, 49, 14, -14, 32, 4, -25, 9, 9, 16, -7, -34, 60, 21, -76, 0, 33, -24, -40, 13, 16, -13, -69, 13, 7, -22, -9, 35, -20, 14, -27, 0, 7, -7, 37, 24, 17, 12, 7, 32, 28, -24, -23, 36, 3, -12, 25, 24, -18, 1, 12, -9, -19, -3, -9, -13, 3, 9, -13, 2, -22, -19, -12, -14, 14, -23, 11, -10, 5, 8, -25, 5, 7, 4, -11, -26, 0, -8, -18, -16, -7, -2, -4, -19, -3, 21, -9, -14, 22, -2, 8, -29, 6, -5, -2, -12, 13, 10, -8, 40, 5, 27, 7, 20, -6, 42, 34, -23, 32, -10, -11, 15, -3, 9, -15, -3, 7, -17, -1, 34, 8, 25, 30, -26, 14, -11, -2, 19, 37, -21, 0, -16, -30, -10, -4, -10, -25, 11, -4, 11, -21, -11, 12, -8, -5, 67, 49, -7, 30, 38, 61, 26, 47, 10, 56, -9, 5, 15, 4, 28, -90, 49, -13, -13, 58, 33, -15, 30, 11, 32, -3, 2, 57, 36, -45, 10, 0, -14, -50, -5, 34, -5, -59, 18, -12, -33, -8, 52, -4, 17, 3, 17, 7, 24, 16, 30, 20, 12, 35, 25, 23, 40, 36, 18, 10, 14, 10, 37, -13, -14, -27, -3, -33, -22, 4, -19, -17, -6, 6, -10, -11, 0, -9, -34, -7, -1, -24, -27, -15, -14, -9, 6, 10, 1, -18, -21, 4, -26, -12, -33, -1, -19, -14, 28, 9, -5, 28, -6, 15, 6, -4, -17, 19, -7, 11, 15, -25, 30, 10, 32, 39, -25, 23, 26, 19, -1, -17, -31, 24, 22, -30, 24, -33, 9, 17, 27, 8, 13, 20, 14, 24, 9, 3, -3, 29, 15, -31, -17, 25, -9, 8, -15, -44, -22, 5, -2, -23, 1, -17, 8, -4, -37, 19, -9, -2, -3, 40, 9, 28, 52, 52, 19, 15, 46, 62, 13, 1, 32, 7, 15, -72, 40, -13, 20, 47, 20, 12, 30, 22, 55, 29, -37, 50, 60, -47, 19, 1, 6, -54, 31, 7, 2, -26, 16, 42, 28, -11, 20, -11, 17, -7, 7, -19, 50, 28, 1, -30, 23, 39, 27, -2, 41, 19, -13, 41, 9, -6, 45, 16, -38, -19, -25, -20, 4, -8, -16, -15, -5, -17, 35, 26, -6, 2, -18, -44, 23, -28, 8, -13, -4, -17, -4, -41, -3, -10, 3, 9, -2, -18, -22, -19, 15, -7, 14, 10, 18, 6, 9, 22, 1, -16, -34, 28, 23, -7, 15, -11, -16, 14, 6, 2, 21, -1, 27, 3, 0, 19, 4, 17, 3, -15, 13, -8, 14, -7, 13, -17, -9, 25, -8, 30, 4, 19, -28, 17, -9, -20, 4, 50, -16, 0, -15, -35, -25, -19, -27, -11, 10, 4, 24, -24, -30, 12, 13, -16, 17, 49, 9, 11, 12, 46, -28, 25, 27, 21, -14, 7, 14, -8, -15, -41, 26, 5, 15, 42, 15, -22, 12, 5, 26, -4, -30, 39, 27, -59, 24, 38, 4, -17, 20, 17, 3, -4, 31, 22, 26, -8, 20, -4, 35, -52, 0, 8, 32, 43, -9, 6, 12, -1, 6, 29, 30, 4, 36, 23, -2, 27, 38, -14, -21, -24, -25, 2, -8, -5, -30, -32, -4, -21, 22, -4, -16, 15, -8, 6, -3, -12, -19, -4, -6, -4, -15, -2, -19, 18, 0, -2, -15, -22, -19, 7, 17, -17, 22, 6, -3, -19, -22, 12, -1, 25, -24, 22, 0, 27, 1, -9, 6, 21, 26, 33, 8, 7, 31, -8, 0, 16, 7, 4, 1, -8, 47, -1, -6, 20, 34, -4, 31, -15, 4, 20, -24, -7, -15, 0, -12, 23, -1, 70, -24, 11, -40, -80, -3, 18, -11, 0, -10, 5, 42, -31, -36, 37, 0, 0, 14, 11, -28, -20, -18, 42, 10, 12, -12, 26, -16, -30, 18, 29, -40, -20, 39, -2, 3, 31, -26, -12, 5, -8, -20, 31, -38, 54, 22, -67, 21, 27, -1, -26, 6, 50, -9, 6, 1, -19, 23, 4, 19, 40, 43, 7, 4, -5, 29, 29, 5, 10, 34, -1, 17, 13, 9, -4, 8, 14, 17, -13, 15, 0, -6, -38, 6, -5, 2, -37, 7, -16, -19, 20, -4, -33, -3, -8, -7, 12, 1, 7, 5, 4, -17, -15, -27, -21, -11, 5, 12, 6, 14, 12, -29, -28, -18, -18, -27, 27, -15, -4, -1, -2, 19, -11, -19, 0, -12, -24, 9, 15, 9, 7, -12, 6, 20, -4, 21, 28, 24, -23, 15, 0, -13, -2, 8, 1, 3, 4, 11, -1, -12, -13, 2, -1, -3, 15, -11, -3, -8, -3, 4, 67, -14, 7, -7, -49, -35, -16, -18, -25, -41, -6, 41, -21, -41, 32, -13, 49, 8, 17, 18, -34, 5, 29, -44, -3, -19, 2, 9, -40, -30, -26, -40, -30, 7, -3, -22, -12, -38, -3, 7, 17, -6, -36, 4, 37, 5, -51, -20, 34, -1, -36, 18, 9, -31, -32, 12, 16, -10, -16, 32, 20, -2, -8, 14, 6, 11, 34, 19, 11, -23, 4, 30, -10, 43, 0, 10, 15, -17, -14, 1, 29, -33, -15, -2, -16, -16, 7, -2, -20, -12, -9, 3, -40, -18, -33, -18, 4, -1, 1, -6, -24, -23, 14, -2, -13, 12, -21, -14, -16, -13, -25, 1, -2, -1, -9, -9, -10, -8, -24, 22, -9, 1, 2, 3, -5, -13, -9, 18, -2, -11, 7, -9, -2, -9, 31, -22, -23, 20, 10, -10, -18, -6, 24, 14, -2, 9, 11, 23, -4, 21, -12, 9, 3, 4, 4, -44, -3, 3, 22, -3, 67, -25, 13, -27, -78, -47, 5, -8, -22, -34, 11, 22, -35, -40, 53, -1, 15, 0, 4, -27, -43, -34, 32, -14, -39, -22, -28, -19, -31, -49, -15, -33, 0, 16, -54, -26, -4, -27, -44, -35, -17, -30, -27, -35, 17, -9, 2, -24, 21, -9, -48, 13, 10, -6, -48, -5, -6, -15, -13, -24, 13, 10, -41, -5, -14, -13, -5, 9, -14, -29, 8, -10, 8, 17, 25, -23, 21, 8, -20, 9, -20, 9, -14, 24, -32, -39, 9, 6, -7, -16, 17, 36, -23, -21, 2, -6, -9, -10, -21, -25, -15, -17, -3, -11, -15, -25, 13, 8, -25, -4, -26, -17, -24, 2, 5, 4, -1, -7, 19, 6, 15, -11, 37, 6, -10, -7, -5, 8, 8, -1, 2, 37, 2, 27, 17, 18, 10, 31, -2, -31, 28, 28, 1, -9, -21, 1, -4, 30, -13, -16, 4, 5, 1, -21, -5, -10, 9, 10, -17, 36, 30, -16, 15, -20, -48, -44, -17, -25, -16, -4, 0, 38, -38, -83, 27, 1, 58, -24, 38, -31, -1, -7, 19, -16, -24, -15, -28, -18, -50, -40, 14, -47, -13, -18, -45, -39, -29, -30, -56, -34, -40, -22, -24, 5, 10, -12, -46, -36, 23, -38, -70, -30, 17, -12, -5, -12, 5, -36, -19, 26, -38, -14, -8, -4, 12, -1, -9, -21, -26, -18, 21, -17, -24, -23, -2, 16, -39, -2, 11, -25, -14, -23, -11, -6, 0, 18, -6, -30, 11, -25, -19, 11, -2, 13, 6, 2, 8, -3, -17, -26, -10, -14, -12, 10, -24, 2, -6, -23, -8, -6, -29, -35, -41, 6, 12, 13, 8, -10, 1, -5, 16, 3, -20, 7, -19, 23, 6, 15, 5, 13, -10, 19, 20, -1, 13, 13, 12, 33, 22, 8, -2, 7, -6, 30, -14, 13, 13, 20, -25, -18, -1, -8, -17, -2, -17, -25, -10, 10, -4, 3, 25, -5, -22, -44, -39, 3, -27, -5, -11, -38, -31, 30, -8, -37, 32, 7, 25, 5, -9, -33, -29, -24, 35, -50, -33, -28, -12, -15, -62, -46, 5, -25, 8, -36, 3, -34, -20, -36, -30, -33, -8, -50, -47, 3, 1, -8, -21, -41, 32, -3, -33, 1, -13, -30, -1, -14, -10, -36, -41, -47, -40, -20, -5, -34, -20, 4, -14, -25, 7, 10, 10, -17, -11, -24, -34, 21, 6, -30, -11, 15, -32, 1, -20, -5, -19, -34, 8, -23, -5, 19, -4, -18, 1, 4, -10, -29, -5, -8, 11, -11, 2, -10, -9, -11, -23, 0, -11, -2, -23, 7, -2, 9, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 3,4000 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0014741841005161405, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int32_t tensor_data5[16] = { 4204, -5836, -3895, -5026, -1501, -7766, -2394, -10788, -8417, -7266, -3846, 4594, -2037, -1567, -4993, -6254, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 6.501444659079425e-06, 6.212909738678718e-06, 6.1758260017086286e-06, 5.9389508351159748e-06, 5.8408136283105705e-06, 4.943812655255897e-06, 6.5787057792476844e-06, 6.1088180700608063e-06, 5.7418023970967624e-06, 5.8075243032362778e-06, 7.1177428253577091e-06, 5.0087974159396254e-06, 5.3150129133427981e-06, 5.5770597100490704e-06, 5.6638587011548225e-06, 5.0066764742950909e-06, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[16*3*3*8] = { 
  /* [0][0][][] */ 66,11,122,31,-14,-11,67,20, 32,71,17,31,-56,-25,91,-67, 14,63,-24,56,-50,-5,33,21, 
  /* [0][1][][] */ 43,20,127,31,30,-24,57,-46, 9,63,38,48,-72,-31,91,-63, -20,83,23,67,44,71,9,-27, 
  /* [0][2][][] */ -15,19,2,-20,-17,19,110,9, 79,96,20,23,-63,-27,12,-62, 51,45,-13,42,-12,-1,45,22, 
  /* [1][0][][] */ -92,25,-61,24,29,-6,-78,67, -74,-105,-58,-63,105,94,-4,79, -12,-50,-47,-117,-19,-31,-56,5, 
  /* [1][1][][] */ -58,-1,-29,-33,-34,-10,-9,12, -36,-36,9,-40,12,44,-25,-46, -18,-53,-88,-100,0,48,-121,0, 
  /* [1][2][][] */ -105,-45,-20,-71,100,111,-65,-9, -62,-127,-39,-71,70,50,-28,5, -107,-102,-25,-41,19,-18,-113,-42, 
  /* [2][0][][] */ -74,61,-116,52,5,45,-67,61, 92,-97,84,-11,64,-36,14,71, -83,38,-32,-29,-32,-13,1,-15, 
  /* [2][1][][] */ -22,84,-118,47,-45,89,-11,86, 20,-59,27,-78,87,1,-15,-49, -50,-55,-8,20,20,-2,-46,-37, 
  /* [2][2][][] */ -52,79,-99,66,-53,112,-127,5, -17,-56,108,8,96,26,52,42, -37,-23,-75,9,-63,-57,-76,-40, 
  /* [3][0][][] */ 24,-74,27,-42,88,6,-82,55, -35,-75,-83,40,16,-14,-87,22, -94,-18,-45,-41,63,30,4,60, 
  /* [3][1][][] */ 35,-87,28,-29,32,-24,-79,5, -59,-25,-127,-40,-29,44,-59,73, -97,-12,38,11,0,17,14,87, 
  /* [3][2][][] */ 7,-25,41,-73,77,6,-5,-14, -104,-45,-90,-31,-27,-29,-61,61, -88,-44,38,-81,73,24,-7,59, 
  /* [4][0][][] */ -44,-55,-58,-54,-42,-33,-21,40, -95,-46,-95,-54,-1,59,-42,-4, -15,4,2,-67,-23,127,-73,55, 
  /* [4][1][][] */ -65,-44,-32,10,53,58,36,-18, -55,57,-72,-14,-48,82,-119,32, -67,-55,-26,4,101,44,-1,46, 
  /* [4][2][][] */ -54,-51,-53,-4,-1,-15,-28,-49, -71,-25,-110,7,3,-5,-88,71, -64,5,-101,-50,106,34,-107,103, 
  /* [5][0][][] */ -127,42,8,61,14,-34,-110,124, -78,-58,-21,-79,109,83,-89,-7, -119,62,-50,18,3,35,-121,53, 
  /* [5][1][][] */ -93,40,-46,-12,58,39,-90,-45, -74,-83,11,-19,97,58,32,78, -32,43,-106,53,-66,55,-40,10, 
  /* [5][2][][] */ -47,0,-111,39,-47,122,-92,30, -2,-101,-53,-17,59,-54,-1,-27, -39,9,-126,34,-15,45,-115,-24, 
  /* [6][0][][] */ -6,70,-38,92,-53,24,-34,35, 48,-127,71,-90,15,10,24,43, -72,-26,-120,51,-18,30,-101,-29, 
  /* [6][1][][] */ -89,51,-2,28,-51,55,-89,0, 87,-98,-10,-91,62,53,24,18, -34,80,-45,-16,-11,31,-17,60, 
  /* [6][2][][] */ -14,41,-22,11,-44,67,-81,-22, 78,-99,16,-84,81,29,-20,73, -96,13,-42,67,-39,-14,-68,-17, 
  /* [7][0][][] */ -71,23,-39,-85,-27,122,-3,51, 2,-24,20,19,81,42,-16,36, -68,-20,-113,-25,56,40,-26,30, 
  /* [7][1][][] */ -62,17,-35,-79,83,11,-10,69, -51,-54,-3,2,-19,49,-4,29, -127,-39,-79,-9,-8,-22,-119,67, 
  /* [7][2][][] */ -104,-85,-20,4,31,10,-64,90, -69,-119,-13,-15,101,15,-81,19, -94,-28,-62,-19,-31,28,-31,34, 
  /* [8][0][][] */ -18,-79,24,35,39,23,-4,73, -54,-117,-68,-4,99,-10,-105,70, -77,-60,-30,6,10,40,-86,-16, 
  /* [8][1][][] */ -33,-87,22,-13,15,-36,-2,-16, -25,-49,-7,-46,36,58,-60,32, -115,-86,-113,-22,21,46,18,25, 
  /* [8][2][][] */ -53,-90,15,-50,56,95,-8,3, 32,-127,50,-73,82,-38,-61,54, -13,-4,-127,-21,4,-37,-4,-43, 
  /* [9][0][][] */ -33,-70,-2,34,-5,86,-13,62, -48,-113,-44,-99,38,48,-70,31, -73,-61,-88,41,-6,65,-82,79, 
  /* [9][1][][] */ -67,34,-74,-63,-21,96,-61,77, -44,-127,21,-108,58,9,-74,-45, -92,-7,-11,-20,-4,67,-29,-27, 
  /* [9][2][][] */ -106,29,-50,-31,30,36,-96,31, -17,-103,-18,-57,-29,32,-98,61, -53,0,-104,-36,55,87,-86,5, 
  /* [10][0][][] */ -97,-39,-59,12,44,19,-27,21, -70,-114,-13,-56,12,-28,-62,26, -68,-32,-73,-1,-32,21,-51,48, 
  /* [10][1][][] */ -54,7,-51,48,39,78,1,69, 24,-127,29,-70,15,-33,35,62, -21,24,-104,-24,27,17,-57,-15, 
  /* [10][2][][] */ -16,-18,-57,17,59,-15,-3,32, -79,-53,41,-64,57,68,-61,-9, -86,-40,-102,-34,-9,-16,4,-45, 
  /* [11][0][][] */ -48,15,15,61,71,39,22,-16, -7,-32,63,18,71,-95,61,10, -26,37,-127,95,-90,-63,-56,-8, 
  /* [11][1][][] */ 117,33,106,-68,70,-42,91,-39, 21,32,-17,33,-35,-77,15,-72, -7,10,-89,45,-90,-27,9,-58, 
  /* [11][2][][] */ 11,-63,123,57,71,16,6,-1, 56,30,60,42,-23,-33,-42,-49, -32,-12,-120,118,-81,14,37,35, 
  /* [12][0][][] */ -103,-24,-104,29,35,43,-9,33, -29,-74,-121,-77,-35,65,-127,-15, 2,-8,38,-15,71,-32,-60,69, 
  /* [12][1][][] */ -117,-116,-72,-68,62,111,-33,65, -12,-67,-96,-60,61,-32,-49,-11, -33,-31,43,-57,49,4,-15,86, 
  /* [12][2][][] */ -72,-125,-86,-102,35,47,-87,47, -82,-107,-51,-17,49,21,-44,-61, 29,-71,39,-47,72,-23,-43,14, 
  /* [13][0][][] */ -6,-31,-21,-57,-30,64,-58,-9, -11,17,-101,-2,-43,-34,-95,-44, -76,-20,26,-31,105,14,-91,101, 
  /* [13][1][][] */ -20,-18,-5,-89,75,-24,-6,18, -66,-3,-127,-65,-43,101,-6,62, -76,-104,0,-85,86,60,-22,83, 
  /* [13][2][][] */ -25,8,-73,18,-31,21,-88,-22, -35,16,-48,-12,68,-2,-110,17, -90,25,-61,-47,43,84,-69,90, 
  /* [14][0][][] */ 8,51,72,11,-22,60,6,-20, 29,17,127,0,4,-19,89,-48, 14,-16,-81,113,-24,-61,-39,-55, 
  /* [14][1][][] */ 32,19,1,7,-46,90,-3,-26, 85,29,90,13,57,-16,109,11, -80,85,-111,-12,-28,11,-112,16, 
  /* [14][2][][] */ -34,83,27,-14,-19,101,-41,-18, -4,-80,42,-51,85,-53,29,-6, -43,91,-84,0,-32,31,-64,18, 
  /* [15][0][][] */ -2,-14,-13,-68,54,11,-81,81, -23,-58,50,-62,48,-27,-14,44, -105,-69,30,-54,-62,13,-27,45, 
  /* [15][1][][] */ -15,-92,25,-84,51,127,-51,65, -32,-112,67,-53,-34,85,0,67, -2,-23,48,-64,63,63,-77,-16, 
  /* [15][2][][] */ -72,-64,-41,-95,-21,-30,12,115, -1,-56,91,25,55,-45,-36,-22, 23,4,58,-46,-48,17,-84,64, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 16,3,3,8 } };
const TfArray<16, float> quant6_scale = { 16, { 0.0026821114588528872, 0.0025630791205912828, 0.002547780517488718, 0.0024500598665326834, 0.0024095741100609303, 0.0020395247265696526, 0.0027139848098158836, 0.0025201370008289814, 0.0023687279317528009, 0.0023958410602062941, 0.0029363597277551889, 0.0020663335453718901, 0.0021926600020378828, 0.0023007648997008801, 0.0023365730885416269, 0.0020654585678130388, } };
const TfArray<16, int> quant6_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { 19333, 13987, 12511, 10799, -12264, -16186, 16076, -15319, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 5.6459834922861774e-06, 6.5409103626734577e-06, 6.5581630224187393e-06, 6.7145101638743654e-06, 8.0449108281754889e-06, 4.5037004383630119e-06, 6.0967763602093328e-06, 5.3736657719127834e-06, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[8*3*3*1] = { 
  /* [0][0][][] */ 13, 58, -20, 
  /* [0][1][][] */ 34, -127, -51, 
  /* [0][2][][] */ 83, -58, -96, 
  /* [1][0][][] */ -127, -95, 8, 
  /* [1][1][][] */ 60, -101, 117, 
  /* [1][2][][] */ -101, 91, 30, 
  /* [2][0][][] */ 101, 86, -119, 
  /* [2][1][][] */ 4, -106, -127, 
  /* [2][2][][] */ 81, 41, -87, 
  /* [3][0][][] */ -113, -33, 2, 
  /* [3][1][][] */ -127, 66, -48, 
  /* [3][2][][] */ 69, -8, 96, 
  /* [4][0][][] */ 116, -16, -1, 
  /* [4][1][][] */ 127, -32, 22, 
  /* [4][2][][] */ 45, 91, -7, 
  /* [5][0][][] */ -19, 98, 71, 
  /* [5][1][][] */ 90, 127, 98, 
  /* [5][2][][] */ -61, 79, 71, 
  /* [6][0][][] */ 75, 98, -23, 
  /* [6][1][][] */ 46, -35, -52, 
  /* [6][2][][] */ -42, -90, -127, 
  /* [7][0][][] */ 116, 30, 97, 
  /* [7][1][][] */ 65, 127, 65, 
  /* [7][2][][] */ -72, 111, -5, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant8_scale = { 8, { 0.0022070046979933977, 0.002556829946115613, 0.002563574118539691, 0.0026246898341923952, 0.0031447410583496094, 0.0017604883760213852, 0.0023832188453525305, 0.0021005561575293541, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,99,40,1 } };
const TfArray<1, float> quant9_scale = { 1, { 0.0025582108646631241, } };
const TfArray<1, int> quant9_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,99,40,8 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0024240023922175169, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,50,20,8 } };
const TfArray<1, float> quant11_scale = { 1, { 0.0024240023922175169, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,50,20,16 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0044431518763303757, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,25,10,16 } };
const TfArray<1, float> quant13_scale = { 1, { 0.0044431518763303757, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,4000 } };
const TfArray<1, float> quant14_scale = { 1, { 0.0044431518763303757, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<2, int> tensor_dimension15 = { 2, { 1,3 } };
const TfArray<1, float> quant15_scale = { 1, { 0.09244963526725769, } };
const TfArray<1, int> quant15_zero = { 1, { 57 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<2, int> tensor_dimension16 = { 2, { 1,3 } };
const TfArray<1, float> quant16_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 9,8,7 } };
const TfArray<1, int> outputs1 = { 1, { 10 } };
const TfLitePoolParams opdata2 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs2 = { 1, { 10 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 11,6,5 } };
const TfArray<1, int> outputs3 = { 1, { 12 } };
const TfLitePoolParams opdata4 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs4 = { 1, { 12 } };
const TfArray<1, int> outputs4 = { 1, { 13 } };
const TfLiteReshapeParams opdata5 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs5 = { 2, { 13,2 } };
const TfArray<1, int> outputs5 = { 1, { 14 } };
const TfLiteFullyConnectedParams opdata6 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs6 = { 3, { 14,4,3 } };
const TfArray<1, int> outputs6 = { 1, { 15 } };
const TfLiteSoftmaxParams opdata7 = { 1 };
const TfArray<1, int> inputs7 = { 1, { 15 } };
const TfArray<1, int> outputs7 = { 1, { 16 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 12000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 31680), (TfLiteIntArray*)&g0::tensor_dimension9, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 31680, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 31680), (TfLiteIntArray*)&g0::tensor_dimension11, 8000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension12, 16000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16000), (TfLiteIntArray*)&g0::tensor_dimension13, 4000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 4000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4000), (TfLiteIntArray*)&g0::tensor_dimension15, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension16, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[8] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[8] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_CONV_2D, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 17, };
const size_t tflNodes_subgraph_index[] = {0, 8, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  16, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_7_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 17;
  for (size_t i = 0; i < 17; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_invoke() {
  for (size_t i = 0; i < 8; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
